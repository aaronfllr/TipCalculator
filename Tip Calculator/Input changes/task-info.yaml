type: edu
files:
  - name: src/main/java/org/hyperskill/calculator/tip/MainActivity.kt
    visible: true
    text: |-
      package org.hyperskill.calculator.tip
      
      import android.os.Bundle
      import androidx.appcompat.app.AppCompatActivity
      
      class MainActivity : AppCompatActivity() {
          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)
          }
      }
    learner_created: false
  - name: src/main/res/drawable/ic_launcher_background.xml
    visible: true
    learner_created: false
  - name: src/main/res/drawable-v24/ic_launcher_foreground.xml
    visible: true
    learner_created: false
  - name: src/main/res/layout/activity_main.xml
    visible: true
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
    visible: true
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
    visible: true
    learner_created: false
  - name: src/main/res/values/colors.xml
    visible: true
    learner_created: false
  - name: src/main/res/values/strings.xml
    visible: true
    learner_created: false
  - name: src/main/res/values/styles.xml
    visible: true
    learner_created: false
  - name: src/main/AndroidManifest.xml
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      apply plugin: 'com.android.application'
      apply plugin: 'kotlin-android'
      
      android {
          compileSdkVersion hs.android.compileSdkVersion
      
          defaultConfig {
      
              applicationId "org.hyperskill.calculator.tip"
              minSdkVersion hs.android.minSdkVersion
              targetSdkVersion hs.android.targetSdkVersion
              versionCode 1
              versionName '1.0'
          }
      
          buildFeatures {
              viewBinding true
          }
      }
      
      dependencies {
          def kotlinVersion = hs.android.kotlinVersion
          implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
      
          def coreKtx = hs.android.lib.coreKtx
          implementation "androidx.core:core-ktx:$coreKtx"
      
          def appCompat = hs.android.lib.appCompat
          implementation "androidx.appcompat:appcompat:$appCompat"
      
          def constraintLayout = hs.android.lib.constraintLayout
          implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
      
          def material = hs.android.lib.material
          implementation "com.google.android.material:material:$material"
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/calculator/tip/internals/screen/TipCalculatorScreen.kt
    visible: false
    text: |-
      package org.hyperskill.calculator.tip.internals.screen
      
      import android.text.InputType
      import android.widget.EditText
      import android.widget.SeekBar
      import android.widget.TextView
      import org.hyperskill.calculator.tip.MainActivity
      import org.hyperskill.calculator.tip.internals.TipCalculatorUnitTest
      import org.junit.Assert.assertEquals
      import java.math.BigDecimal
      import java.util.concurrent.TimeUnit
      
      // Version 3.0
      class TipCalculatorScreen(
          private val test: TipCalculatorUnitTest<MainActivity>, initViews: Boolean = true) {
      
          companion object {
              const val idEditText = "edit_text"
              const val idSeekBar = "seek_bar"
              const val idBillValueTextView = "bill_value_tv"
              const val idTipPercentTextView = "tip_percent_tv"
              const val idTipAmountTextView = "tip_amount_tv"
      
              const val formatTipPercent = "Tip: %d%%"
              const val formatBillValue = "Bill Value: $%.2f"
              const val formatTipAmount = "Tip Amount: $%s"
          }
      
          val editText by lazy  {
              with(test) {
                  activity.findViewByString<EditText>(idEditText).apply {
                      val messageInputTypeError = "View \"$idEditText\" should have inputType number"
                      val expectedInputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL
                      val actualInputType = inputType
                      assertEquals(messageInputTypeError, expectedInputType, actualInputType)
      
                      val messageHintError = "View \"$idEditText\" should have hint"
                      val expectedHint = "Insert Bill Value"
                      val actualHint = hint
                      assertEquals(messageHintError, expectedHint, actualHint)
                  }
              }
          }
      
          val seekBar by lazy  {
              with(test) {
                  activity.findViewByString<SeekBar>(idSeekBar).apply {
                      assertSeekbarInitialValues(
                          idString = idSeekBar,
                          expectedMinProgress = 0,
                          expectedMaxProgress = 100,
                          expectedProgress = 15
                      )
                  }
              }
          }
      
          val billValueTextView by lazy  {
              with(test) {
                  activity.findViewByString<TextView>(idBillValueTextView).apply {
                      val messageInitialTextError =
                          "View \"$idBillValueTextView\" should initially have empty text"
                      val expectedInitialText = ""
                      val actualInitialText = text.toString()
                      assertEquals(messageInitialTextError, expectedInitialText, actualInitialText)
                  }
              }
          }
      
          val tipPercentTextView by lazy  {
              with(test) {
                  activity.findViewByString<TextView>(idTipPercentTextView).apply {
                      val messageInitialTextError =
                          "View \"$idTipPercentTextView\" should initially have empty text"
                      val expectedInitialText = ""
                      val actualInitialText = text.toString()
                      assertEquals(messageInitialTextError, expectedInitialText, actualInitialText)
                  }
              }
      
          }
      
          val tipAmountTextView by lazy  {
              with(test) {
                  activity.findViewByString<TextView>(idTipAmountTextView).apply {
                      val messageInitialTextError =
                          "View \"$idTipAmountTextView\" should initially have empty text"
                      val expectedInitialText = ""
                      val actualInitialText = text.toString()
                      assertEquals(messageInitialTextError, expectedInitialText, actualInitialText)
                  }
              }
          }
      
          init {
              if(initViews) {
                  editText
                  tipPercentTextView
                  billValueTextView
                  tipAmountTextView
                  seekBar
              }
          }
      
          fun setTipPercent(tipPercent: Int) = with(test) {
              seekBar.setProgressAsUser(tipPercent)
          }
      
          fun setBillAmount(billAmount: String) = with(test) {
              editText.setText(billAmount)
              shadowLooper.idleFor(500L, TimeUnit.MILLISECONDS)
          }
      
          fun assertTipPercentIsEmpty(caseDescription: String) = with(test) {
              assertTextViewIsEmpty(caseDescription,
                  idTipPercentTextView, tipPercentTextView)
          }
      
          fun assertBillValueIsEmpty(caseDescription: String) = with(test) {
              assertTextViewIsEmpty(caseDescription,
                  idBillValueTextView, billValueTextView)
          }
      
          fun asserTipAmountIsEmpty(caseDescription: String) = with(test) {
              assertTextViewIsEmpty(caseDescription,
                  idTipAmountTextView, tipAmountTextView)
          }
      
          fun assertTipPercent(caseDescription: String, tipPercent: Int) = with(test) {
              val expectedTipPercentText = formatTipPercent.format(tipPercent)
              assertTextViewText(
                  caseDescription = caseDescription,
                  expectedText = expectedTipPercentText,
                  idString = idTipPercentTextView,
                  textView = tipPercentTextView
              )
          }
      
          fun assertBillValue(caseDescription: String, billValue: BigDecimal) = with(test) {
              val expectedBillValueText = formatBillValue.format(billValue)
              assertTextViewText(
                  caseDescription = caseDescription,
                  expectedText = expectedBillValueText,
                  idString = idBillValueTextView,
                  textView = billValueTextView
              )
          }
      
          fun assertTipAmount(caseDescription: String, tipAmount: String) = with(test) {
              val expectedTipAmountText = formatTipAmount.format(tipAmount)
              assertTextViewText(
                  caseDescription = caseDescription,
                  expectedText =  expectedTipAmountText,
                  idString = idTipAmountTextView,
                  textView = tipAmountTextView
              )
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/calculator/tip/internals/AbstractUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.calculator.tip.internals
      
      import android.app.Activity
      import android.app.AlertDialog
      import android.content.Intent
      import android.os.Bundle
      import android.view.View
      import android.widget.SeekBar
      import org.junit.Assert.*
      import org.robolectric.Robolectric
      import org.robolectric.Shadows.shadowOf
      import org.robolectric.android.controller.ActivityController
      import org.robolectric.shadow.api.Shadow
      import org.robolectric.shadows.ShadowActivity
      import org.robolectric.shadows.ShadowAlertDialog
      import org.robolectric.shadows.ShadowLooper
      import org.robolectric.shadows.ShadowToast
      import java.time.Duration
      import java.util.concurrent.TimeUnit
      
      // Version 3.0
      abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {
      
          /**
           * Setup and control activities and their lifecycle
           */
          val activityController: ActivityController<T> by lazy {
              Robolectric.buildActivity(clazz)
          }
      
          /**
           * The activity being tested.
           *
           * It is the @RealObject of the shadowActivity
           */
          val activity : Activity by lazy {
              activityController.get()
          }
      
          /**
           * A Roboletric shadow object of the Activity class, contains helper methods to deal with
           * testing activities like setting permissions, peeking results of launched activities for result,
           * retrieving shown dialogs, intents and others.
           *
           * If you don't know what shadows are you can have a better understanding on that reading this
           * on roboletric documentation: http://robolectric.org/extending/
           *
           * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
           * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
           * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
           * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
           *
           * Things in Roboletric are not what they appear to be.
           * It is possible to not notice it for the most part, but it will be essential for some other parts
           */
          val shadowActivity: ShadowActivity by lazy {
              Shadow.extract(activity)
          }
      
          /**
           * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
           *
           * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
           */
          val shadowLooper: ShadowLooper by lazy {
              shadowOf(activity.mainLooper)
          }
      
          /**
           * Decorate your test code with this method to ensure better error messages displayed
           * when tests are run with check button and exceptions are thrown by user implementation.
           *
           * returns a value for convenience use, like in tests that involve navigation between Activities
           */
          fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
              try {
                  activity.intent =  arguments
                  activityController.setup(savedInstanceState)
              } catch (ex: Exception) {
                  throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
              }
      
              return try {
                  testCodeBlock(activity)
              } catch (ex: Exception) {
                  throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
              }
          }
      
          /**
           * Use this method to find views.
           *
           * The view existence will be assert before being returned
           */
          inline fun <reified T> Activity.findViewByString(idString: String): T {
              val id = this.resources.getIdentifier(idString, "id", this.packageName)
              val view: View? = this.findViewById(id)
      
              val idNotFoundMessage = "View with id \"$idString\" was not found"
              val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                      "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"
      
              assertNotNull(idNotFoundMessage, view)
              assertTrue(wrongClassMessage, view is T)
      
              return view as T
          }
      
          /**
           * Use this method to find views.
           *
           * The view existence will be assert before being returned
           */
          inline fun <reified T> View.findViewByString(idString: String): T {
              val id = this.resources.getIdentifier(idString, "id", context.packageName)
              val view: View? = this.findViewById(id)
      
              val idNotFoundMessage = "View with id \"$idString\" was not found"
              val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                      "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"
      
              assertNotNull(idNotFoundMessage, view)
              assertTrue(wrongClassMessage, view is T)
      
              return view as T
          }
      
          /**
           * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
           * enqueued Runnable scheduled to run on main looper in that timeframe.
           * Default value for millis is 500
           *
           * Internally it calls performClick() and shadowLooper.idleFor(millis)
           */
          fun View.clickAndRun(millis: Long = 500){
              this.performClick()
              shadowLooper.idleFor(Duration.ofMillis(millis))
          }
      
          /**
           * Asserts that the last message toasted is the expectedMessage.
           * Assertion fails if no toast is shown with null actualLastMessage value.
           */
          fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
              val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
              assertEquals(errorMessage, expectedMessage, actualLastMessage)
          }
      
          /**
           * Use this method to retrieve the latest AlertDialog.
           *
           * The existence of such AlertDialog will be asserted before returning.
           *
           * Robolectric only supports android.app.AlertDialog, test will not be
           * able to find androidx.appcompat.app.AlertDialog.
           *
           * - Important!!! :
           * When writing stage description state explicitly the correct version that should be imported
           */
          fun getLatestDialog(): AlertDialog {
              val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()
      
              assertNotNull(
                  "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                  latestAlertDialog
              )
      
              return latestAlertDialog!!
          }
      
          /**
           * Use this method to set the progress as a user.
           *
           * Will trigger attached listeners.
           *
           * First onStartTrackingTouch(), then onProgressChanged() as user, and finally onStopTrackingTouch()
           */
          fun SeekBar.setProgressAsUser(progress: Int) {
              val shadowSeekBar = shadowOf(this)
              assertNotNull("Expected seekbar to have a onSeekBarChangeListener", shadowSeekBar.onSeekBarChangeListener)
      
              shadowSeekBar.onSeekBarChangeListener.onStartTrackingTouch(this)
      
              // using java reflection to change progress without triggering listener
              var clazz: Class<*> = this::class.java  // may be subclass of SeekBar
              while(clazz.name != "android.widget.ProgressBar") {  // since SeekBar is a subclass of ProgressBar this should not be an infinite loop
                  clazz = clazz.superclass as Class<*>
              }
              val progressBarClazz = clazz
              val progressField = progressBarClazz.getDeclaredField("mProgress")
              progressField.isAccessible = true
              progressField.setInt(this, progress)
              //
      
              shadowSeekBar.onSeekBarChangeListener.onProgressChanged(this, progress, true)
              shadowSeekBar.onSeekBarChangeListener.onStopTrackingTouch(this)
              shadowLooper.idleFor(500L, TimeUnit.MILLISECONDS)
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/calculator/tip/internals/TipCalculatorUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.calculator.tip.internals
      
      import android.app.Activity
      import android.widget.SeekBar
      import android.widget.TextView
      import org.junit.Assert.assertEquals
      import org.junit.Assert.assertTrue
      
      // Version 3.0
      open class TipCalculatorUnitTest<T : Activity>(clazz: Class<T>) : AbstractUnitTest<T>(clazz) {
      
          internal fun SeekBar.assertSeekbarInitialValues(
              idString: String,
              expectedMinProgress: Int,
              expectedMaxProgress: Int,
              expectedProgress: Int
          ) {
      
              val messageValueToError =
                  "View \"$idString\" should have required max attribute"
              val actualValueTo = max
              assertEquals(messageValueToError, expectedMaxProgress, actualValueTo)
      
              val messageValueError =
                  "View \"$idString\" should have proper initial value for attribute progress"
              val actualValue = progress
              assertEquals(messageValueError, expectedProgress, actualValue)
      
              val messageValueFromError =
                  "On View \"$idString\" keep the value of min attribute set to 0"
              val actualValueFrom = min
              assertEquals(messageValueFromError, expectedMinProgress, actualValueFrom)
          }
          internal fun assertTextViewText(
              caseDescription: String, expectedText: String, idString: String, textView: TextView) {
      
              val messageTextError =
                  "When $caseDescription then View with id \"$idString\" should have text"
              val actualText = textView.text
              assertEquals(messageTextError, expectedText, actualText)
          }
      
          internal fun assertTextViewIsEmpty(caseDescription: String, idString: String, textView: TextView) {
              val messageTextNotEmptyError =
                  "When $caseDescription View with id \"$idString\" should be empty"
              val isBillEmpty = textView.text.isNullOrEmpty()
              assertTrue(messageTextNotEmptyError, isBillEmpty)
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/calculator/tip/Stage1UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.calculator.tip
      
      import org.hyperskill.calculator.tip.internals.TipCalculatorUnitTest
      import org.hyperskill.calculator.tip.internals.screen.TipCalculatorScreen
      import org.junit.FixMethodOrder
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.junit.runners.MethodSorters
      import org.robolectric.RobolectricTestRunner
      
      // Version 3.0
      @RunWith(RobolectricTestRunner::class)
      @FixMethodOrder(MethodSorters.NAME_ASCENDING)
      class Stage1UnitTest : TipCalculatorUnitTest<MainActivity>(MainActivity::class.java) {
      
          @Test
          fun test00_checkEditText() {
              testActivity {
                  TipCalculatorScreen(this, initViews = false).apply {
                      editText
                  }
              }
          }
      
          @Test
          fun test01_checkSlider() {
              testActivity {
                  TipCalculatorScreen(this, initViews = false).apply {
                      seekBar
                  }
              }
          }
      
          @Test
          fun test02_checkBillValueTextView() {
              testActivity {
                  TipCalculatorScreen(this, initViews = false).apply {
                      billValueTextView
                  }
              }
          }
      
          @Test
          fun test03_checkTipPercentTextView() {
              testActivity {
                  TipCalculatorScreen(this, initViews = false).apply {
                      tipPercentTextView
                  }
              }
          }
      
          @Test
          fun test04_checkTipAmountTextView() {
              testActivity {
                  TipCalculatorScreen(this, initViews = false).apply {
                      tipAmountTextView
                  }
              }
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/calculator/tip/Stage2UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.calculator.tip
      
      import org.hyperskill.calculator.tip.internals.TipCalculatorUnitTest
      import org.hyperskill.calculator.tip.internals.screen.TipCalculatorScreen
      import org.hyperskill.calculator.tip.internals.screen.TipCalculatorScreen.Companion.idEditText
      import org.junit.FixMethodOrder
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.junit.runners.MethodSorters
      import org.robolectric.RobolectricTestRunner
      
      // Version 3.0
      @RunWith(RobolectricTestRunner::class)
      @FixMethodOrder(MethodSorters.NAME_ASCENDING)
      class Stage2UnitTest : TipCalculatorUnitTest<MainActivity>(MainActivity::class.java) {
      
      
          @Test
          fun test00_whenEditTextEmtpyThenTipAndBillTextViewsAreEmpty() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      setTipPercent(tipPercent = 20)
      
                      val caseDescription = "\"$idEditText\" text is empty"
                      assertTipPercentIsEmpty(caseDescription)
                      assertBillValueIsEmpty(caseDescription)
                  }
              }
          }
      
          @Test
          fun test01_whenEditTextIsZeroThenTipAndBillTextViewsAreEmpty() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      setBillAmount("0")
      
                      val caseDescription = "\"$idEditText\" text is 0"
                      assertTipPercentIsEmpty(caseDescription)
                      assertBillValueIsEmpty(caseDescription)
                  }
              }
          }
      
          @Test
          fun test02_checkValueWithInitialTip() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      val billValueToTest = 50
                      setBillAmount("$billValueToTest")
                      val tipToTest = 15
      
                      val caseDescription = "initial tip value and $billValueToTest as bill amount"
                      assertTipPercent(caseDescription, tipToTest)
                      assertBillValue(caseDescription, billValueToTest.toBigDecimal())
                  }
              }
          }
      
          @Test
          fun test03_checkBothValueAndTipSetWithSeekBarSetLast() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      val billValueToTest = 201
                      setBillAmount("$billValueToTest")
      
                      val tipToTest = 10
                      setTipPercent(tipToTest)
      
                      val caseDescription =
                          "first bill is set to $billValueToTest and then tip is set to $tipToTest"
                      assertTipPercent(caseDescription, tipToTest)
                      assertBillValue(caseDescription, billValueToTest.toBigDecimal())
                  }
              }
          }
      
          @Test
          fun test04_checkEditTextListenerLast() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      val billValueToTest = 39
                      setBillAmount("$billValueToTest")
      
                      val tipToTest = 90
                      setTipPercent(tipToTest)
      
                      val caseDescription =
                          "first tip is set to $tipToTest and then bill is set to $billValueToTest"
                      assertTipPercent(caseDescription, tipToTest)
                      assertBillValue(caseDescription, billValueToTest.toBigDecimal())
                  }
              }
          }
      
          @Test
          fun test05_checkLargeValue() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      val messageLargeNumberTextError = "Make sure you give support for large numbers"
      
                      try {
                          val billValueToTest = "100000000000000000000"
                          setBillAmount(billValueToTest)
      
                          val tipToTest = 90
                          setTipPercent(tipToTest)
      
                          val caseDescription =
                              "bill value is set to a large int value and tip is set to $tipToTest"
                          assertTipPercent(caseDescription, tipToTest)
                          assertBillValue(caseDescription, billValueToTest.toBigDecimal())
      
                      } catch (ex: Exception) {
                          throw AssertionError(
                              "Exception thrown ${ex.javaClass.simpleName}. " +
                                      messageLargeNumberTextError, ex
                          )
                      }
                  }
              }
          }
      
          @Test
          fun test06_checkDecimalValue() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      val billValueToTest = "70.12"
                      setBillAmount(billValueToTest)
      
                      val tipToTest = 50
                      setTipPercent(tipToTest)
      
                      val caseDescription =
                          "bill value is set to a decimal number and tip is set to $tipToTest"
                      assertTipPercent(caseDescription, tipToTest)
                      assertBillValue(caseDescription, billValueToTest.toBigDecimal())
                  }
              }
          }
      
          @Test
          fun test07_checkClearingValue() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      setBillAmount("10.10")
                      setBillAmount("")
      
                      val caseDescription = "\"$idEditText\" has been cleared"
                      assertTipPercentIsEmpty(caseDescription)
                      assertBillValueIsEmpty(caseDescription)
                  }
              }
          }
      
          @Test
          fun test08_checkZeroingValue() {
              testActivity {
                  TipCalculatorScreen(this).apply {
                      setBillAmount("10.10")
                      setBillAmount("0.0")
      
                      val caseDescription = "\"$idEditText\" has been zeroed"
                      assertTipPercentIsEmpty(caseDescription)
                      assertBillValueIsEmpty(caseDescription)
                  }
              }
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/12246#comment
status: Unchecked
record: 2
